"""Main Telegram bot for China IT News channel."""

import asyncio
import logging
from datetime import datetime
from aiogram import Bot, Dispatcher, Router, F
from aiogram.enums import ParseMode
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton, BotCommand
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
from apscheduler.triggers.interval import IntervalTrigger
import pytz

import config
from rss_collector import RSSCollector
from generator import get_generator, generate_vacancy_from_freeform
from publisher import get_publisher

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# FSM States for vacancy submission
class VacancyStates(StatesGroup):
    waiting_for_position = State()
    waiting_for_company = State()
    waiting_for_location = State()
    waiting_for_salary = State()
    waiting_for_experience = State()
    waiting_for_description = State()
    waiting_for_requirements = State()
    waiting_for_benefits = State()
    waiting_for_contact = State()
    confirming_vacancy = State()
    # Free-form vacancy flow
    waiting_for_freeform = State()
    confirming_freeform = State()

# FSM States for advertisement submission
class AdStates(StatesGroup):
    waiting_for_title = State()
    waiting_for_brand = State()
    waiting_for_description = State()
    waiting_for_offer = State()
    waiting_for_link = State()
    waiting_for_contact = State()
    confirming_ad = State()

class ChinaITBot:
    def __init__(self):
        self.bot = Bot(token=config.BOT_TOKEN)
        self.dp = Dispatcher(storage=MemoryStorage())
        self.scheduler = AsyncIOScheduler(timezone=pytz.timezone(config.TIMEZONE))
        
        # Initialize components
        self.rss_collector = RSSCollector()
        self.generator = get_generator()
        self.publisher = get_publisher()
        
        # Setup handlers
        self.setup_handlers()
        
        # Setup scheduler
        self.setup_scheduler()

    def setup_handlers(self):
        """Setup bot message and callback handlers."""
        
        # Command handlers
        self.dp.message(Command("start"))(self.cmd_start)
        self.dp.message(Command("help"))(self.cmd_help)
        self.dp.message(Command("post_vacancy"))(self.cmd_post_vacancy)
        self.dp.message(Command("post_vacancy_free"))(self.cmd_post_vacancy_free)
        self.dp.message(Command("post_ad"))(self.cmd_post_ad)
        self.dp.message(Command("post_now"))(self.cmd_post_now)
        self.dp.message(Command("status"))(self.cmd_status)
        
        # Vacancy submission FSM handlers
        self.dp.message(StateFilter(VacancyStates.waiting_for_position))(self.process_position)
        self.dp.message(StateFilter(VacancyStates.waiting_for_company))(self.process_company)
        self.dp.message(StateFilter(VacancyStates.waiting_for_location))(self.process_location)
        self.dp.message(StateFilter(VacancyStates.waiting_for_salary))(self.process_salary)
        self.dp.message(StateFilter(VacancyStates.waiting_for_experience))(self.process_experience)
        self.dp.message(StateFilter(VacancyStates.waiting_for_description))(self.process_description)
        self.dp.message(StateFilter(VacancyStates.waiting_for_requirements))(self.process_requirements)
        self.dp.message(StateFilter(VacancyStates.waiting_for_benefits))(self.process_benefits)
        self.dp.message(StateFilter(VacancyStates.waiting_for_contact))(self.process_contact)
        # Free-form vacancy text handler
        self.dp.message(StateFilter(VacancyStates.waiting_for_freeform))(self.process_freeform_text)

        # Advertisement FSM handlers
        self.dp.message(StateFilter(AdStates.waiting_for_title))(self.process_ad_title)
        self.dp.message(StateFilter(AdStates.waiting_for_brand))(self.process_ad_brand)
        self.dp.message(StateFilter(AdStates.waiting_for_description))(self.process_ad_description)
        self.dp.message(StateFilter(AdStates.waiting_for_offer))(self.process_ad_offer)
        self.dp.message(StateFilter(AdStates.waiting_for_link))(self.process_ad_link)
        self.dp.message(StateFilter(AdStates.waiting_for_contact))(self.process_ad_contact)
        
        # Callback handlers
        self.dp.callback_query(F.data == "confirm_vacancy")(self.confirm_vacancy)
        self.dp.callback_query(F.data == "edit_vacancy")(self.edit_vacancy)
        self.dp.callback_query(F.data == "cancel_vacancy")(self.cancel_vacancy)
        self.dp.callback_query(F.data.startswith("polish_"))(self.handle_polish_choice)
        # Free-form callbacks
        self.dp.callback_query(F.data == "confirm_freeform_vacancy")(self.confirm_freeform_vacancy)
        self.dp.callback_query(F.data == "edit_freeform_vacancy")(self.edit_freeform_vacancy)
        # Advertisement callbacks
        self.dp.callback_query(F.data == "confirm_ad")(self.confirm_ad)
        self.dp.callback_query(F.data == "edit_ad")(self.edit_ad)

    def setup_scheduler(self):
        """Setup scheduled tasks."""
        # Parse publish time
        hour, minute = map(int, config.PUBLISH_TIME.split(':'))
        
        # Schedule hourly news posting (one article per hour)
        if getattr(config, 'ENABLE_HOURLY_POST', True):
            self.scheduler.add_job(
                self.hourly_news_job,
                IntervalTrigger(minutes=10),
                id='hourly_news',
                name='Hourly News Posting',
                replace_existing=True
            )
            logger.info("üìÖ Scheduled news posting: every 10 minutes")
        
        # Optionally schedule daily news posting (disabled by default)
        if getattr(config, 'ENABLE_DAILY_POST', False):
            self.scheduler.add_job(
                self.daily_news_job,
                CronTrigger(hour=hour, minute=minute),
                id='daily_news',
                name='Daily News Posting',
                replace_existing=True
            )
            logger.info(f"üìÖ Scheduled daily news posting at {config.PUBLISH_TIME} {config.TIMEZONE}")

    async def daily_news_job(self):
        """Daily job to collect and publish news."""
        try:
            logger.info("üîÑ Starting daily news collection...")
            # Collect RSS articles
            articles = await self.rss_collector.collect_all_feeds()
            if articles:
                max_count = getattr(config, 'MAX_ARTICLES_PER_DAY', 3)
                published = 0
                for article in articles[:max_count]:
                    ok = await self.publisher.publish_article(article)
                    if ok:
                        # Mark as seen only after successful publish
                        self.rss_collector.seen_articles.add(article['link'])
                        self.rss_collector.save_seen_articles()
                        published += 1
                if published > 0:
                    logger.info(f"‚úÖ Published {published} article(s) as individual posts")
                else:
                    logger.error("‚ùå Failed to publish articles")
                    await self.notify_admin("–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ –æ–¥–Ω–æ–π —Å—Ç–∞—Ç—å–µ")
            else:
                logger.info("üì∞ No new articles found today")
        except Exception as e:
            logger.error(f"‚ùå Error in daily news job: {e}")
            await self.notify_admin(f"–û—à–∏–±–∫–∞ –≤ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –∑–∞–¥–∞—á–µ: {str(e)}")

    async def hourly_news_job(self):
        """Hourly job to publish exactly one article."""
        try:
            logger.info("üîÑ Hourly run: collecting latest article...")
            articles = await self.rss_collector.collect_all_feeds()
            if articles:
                article = articles[0]
                ok = await self.publisher.publish_article(article)
                if ok:
                    # Mark as seen only after successful publish
                    self.rss_collector.seen_articles.add(article['link'])
                    self.rss_collector.save_seen_articles()
                    logger.info("‚úÖ Published 1 article (hourly)")
                else:
                    logger.error("‚ùå Failed to publish hourly article")
                    await self.notify_admin("–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –µ–∂–µ—á–∞—Å–Ω–æ–π —Å—Ç–∞—Ç—å–∏")
            else:
                logger.info("üì∞ Hourly: no new articles")
        except Exception as e:
            logger.error(f"‚ùå Error in hourly news job: {e}")
            await self.notify_admin(f"–û—à–∏–±–∫–∞ –≤ –µ–∂–µ—á–∞—Å–Ω–æ–π –∑–∞–¥–∞—á–µ: {str(e)}")

    async def notify_admin(self, message: str):
        """Send notification to admin (you can customize this)."""
        try:
            # For now, just log the error. You can extend this to send DM to admin
            logger.warning(f"üîî Admin notification: {message}")
        except Exception as e:
            logger.error(f"Failed to notify admin: {e}")

    # Command handlers
    async def cmd_start(self, message: Message):
        """Handle /start command."""
        welcome_text = """üá®üá≥ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ China IT News Bot!**

–≠—Ç–æ—Ç –±–æ—Ç —É–ø—Ä–∞–≤–ª—è–µ—Ç –∫–∞–Ω–∞–ª–æ–º —Å –Ω–æ–≤–æ—Å—Ç—è–º–∏ IT –∏ –≤–∞–∫–∞–Ω—Å–∏—è–º–∏ –≤ –ö–∏—Ç–∞–µ.

**–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
/post_vacancy - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –≤–∞–∫–∞–Ω—Å–∏—é
/post_vacancy_free - –í–∞–∫–∞–Ω—Å–∏—è –≤ —Å–≤–æ–±–æ–¥–Ω–æ–π —Ñ–æ—Ä–º–µ
/post_ad - –î–æ–±–∞–≤–∏—Ç—å —Ä–µ–∫–ª–∞–º–Ω—ã–π –ø–æ—Å—Ç
/post_now - –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ —Å–µ–π—á–∞—Å (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
/status - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

**–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏:**
üì∞ –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π –≤ {publish_time}
ü§ñ AI-–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
üìä –°–±–æ—Ä –Ω–æ–≤–æ—Å—Ç–µ–π –∏–∑ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤

–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /post_vacancy –∏–ª–∏ /post_vacancy_free""".format(publish_time=config.PUBLISH_TIME)
        
        keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="/post_vacancy"), KeyboardButton(text="/post_vacancy_free")],
                [KeyboardButton(text="/post_ad"), KeyboardButton(text="/status")],
                [KeyboardButton(text="/help")],
            ],
            resize_keyboard=True,
            input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É"
        )
        await message.answer(welcome_text, parse_mode=ParseMode.HTML, reply_markup=keyboard)

    async def cmd_help(self, message: Message):
        """Handle /help command."""
        help_text = """üìñ **–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É China IT News**

**–ö–æ–º–∞–Ω–¥—ã:**
‚Ä¢ `/start` - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
‚Ä¢ `/post_vacancy` - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –≤–∞–∫–∞–Ω—Å–∏—é
‚Ä¢ `/post_vacancy_free` - –î–æ–±–∞–≤–∏—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é –≤ —Å–≤–æ–±–æ–¥–Ω–æ–π —Ñ–æ—Ä–º–µ
‚Ä¢ `/post_ad` - –î–æ–±–∞–≤–∏—Ç—å —Ä–µ–∫–ª–∞–º–Ω—ã–π –ø–æ—Å—Ç
‚Ä¢ `/post_now` - –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –Ω–æ–≤–æ—Å—Ç–∏
‚Ä¢ `/status` - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã

**–ö–∞–∫ –¥–æ–±–∞–≤–∏—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é:**
1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É `/post_vacancy`
   –ë–æ—Ç –ø–æ —à–∞–≥–∞–º —Å–ø—Ä–æ—Å–∏—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è –∏ –ø–æ–∫–∞–∂–µ—Ç –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä. –ú–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å —Ç–µ–∫—Å—Ç —á–µ—Ä–µ–∑ AI.

–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–±–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç —á–µ—Ä–µ–∑ `/post_vacancy_free` ‚Äî —è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É—é –µ–≥–æ –ø–æ –µ–¥–∏–Ω–æ–º—É —à–∞–±–ª–æ–Ω—É –∏ –ø—Ä–∏–∫—Ä–µ–ø–ª—é —Å—Å—ã–ª–∫—É, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å –≤ —Ç–µ–∫—Å—Ç–µ.

**–ö–∞–∫ –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ–∫–ª–∞–º—É:**
–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/post_ad` ‚Äî –ø–æ —à–∞–≥–∞–º –¥–æ–±–∞–≤–∏–º –∑–∞–≥–æ–ª–æ–≤–æ–∫, –±—Ä–µ–Ω–¥, –æ–ø–∏—Å–∞–Ω–∏–µ, –æ—Ñ—Ñ–µ—Ä, —Å—Å—ã–ª–∫—É –∏ –∫–æ–Ω—Ç–∞–∫—Ç, –ø–æ–∫–∞–∂—É –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∏ –≤—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø—É–±–ª–∏–∫–∞—Ü–∏—é."""
        await message.answer(help_text, parse_mode=ParseMode.HTML)

    async def cmd_status(self, message: Message):
        """Handle /status command."""
        try:
            # Check components status
            status_text = "üîç **–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã:**\n\n"
            
            # Check publisher connection
            publisher_ok = await self.publisher.test_connection()
            status_text += f"üì° Telegram: {'‚úÖ' if publisher_ok else '‚ùå'}\n"
            
            # Check scheduler
            scheduler_running = self.scheduler.running
            status_text += f"‚è∞ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫: {'‚úÖ' if scheduler_running else '‚ùå'}\n"
            
            # Check LLM
            try:
                llm_client = self.generator.llm_client
                status_text += f"ü§ñ LLM ({config.LLM_PROVIDER}): ‚úÖ\n"
            except Exception:
                status_text += f"ü§ñ LLM: ‚ùå\n"
            
            # Show next scheduled job
            if scheduler_running:
                jobs = self.scheduler.get_jobs()
                if jobs:
                    next_job = min(jobs, key=lambda j: j.next_run_time)
                    status_text += f"\n‚è≠Ô∏è –°–ª–µ–¥—É—é—â–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è: {next_job.next_run_time.strftime('%d.%m.%Y %H:%M')}"
            
            status_text += f"\n\nüìä –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:\n"
            status_text += f"‚Ä¢ –ö–∞–Ω–∞–ª: {config.CHANNEL_ID}\n"
            status_text += f"‚Ä¢ –í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {config.PUBLISH_TIME}\n"
            status_text += f"‚Ä¢ LLM –ø—Ä–æ–≤–∞–π–¥–µ—Ä: {config.LLM_PROVIDER}\n"
            status_text += f"‚Ä¢ –ú–∞–∫—Å. —Å—Ç–∞—Ç–µ–π –≤ –¥–µ–Ω—å: {config.MAX_ARTICLES_PER_DAY}\n"
            # AI polish flags
            ai_vac = '–î–∞' if getattr(config, 'AI_POLISH_ENABLE_VACANCY', True) else '–ù–µ—Ç'
            ai_ad = '–î–∞' if getattr(config, 'AI_POLISH_ENABLE_AD', True) else '–ù–µ—Ç'
            status_text += f"‚Ä¢ –ü–æ–ª–∏—Ä–æ–≤–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–π AI: {ai_vac}\n"
            status_text += f"‚Ä¢ –ü–æ–ª–∏—Ä–æ–≤–∫–∞ —Ä–µ–∫–ª–∞–º—ã AI: {ai_ad}"
            
        except Exception as e:
            status_text = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: {str(e)}"
        
        await message.answer(status_text, parse_mode=ParseMode.HTML)

    async def cmd_post_now(self, message: Message):
        """Handle /post_now command (admin only)."""
        # Admin check based on config.ADMIN_IDS
        if message.from_user.id not in config.ADMIN_IDS:
            await message.answer("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
            return
        await message.answer("üîÑ –ó–∞–ø—É—Å–∫–∞—é —Å–±–æ—Ä –∏ –ø—É–±–ª–∏–∫–∞—Ü–∏—é –æ–¥–Ω–æ–π –Ω–æ–≤–æ—Å—Ç–∏ (–µ–∂–µ—á–∞—Å–Ω–æ–π –ª–æ–≥–∏–∫–æ–π)...")
        try:
            await self.hourly_news_job()
            await message.answer("‚úÖ –ù–æ–≤–æ—Å—Ç—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞!")
        except Exception as e:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

    async def cmd_post_vacancy(self, message: Message, state: FSMContext):
        """Start vacancy posting process."""
        await state.set_state(VacancyStates.waiting_for_position)
        await message.answer(
            "üíº **–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –≤–∞–∫–∞–Ω—Å–∏–∏**\n\n"
            "–î–∞–≤–∞–π—Ç–µ –∑–∞–ø–æ–ª–Ω–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞–∫–∞–Ω—Å–∏–∏ –ø–æ —à–∞–≥–∞–º.\n\n"
            "**–®–∞–≥ 1/9:** –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: *Senior Python Developer*",
            parse_mode=ParseMode.HTML
        )

    async def cmd_post_vacancy_free(self, message: Message, state: FSMContext):
        """Start free-form vacancy posting process."""
        await state.set_state(VacancyStates.waiting_for_freeform)
        await message.answer(
            "üíº **–°–≤–æ–±–æ–¥–Ω–∞—è –≤–∞–∫–∞–Ω—Å–∏—è**\n\n"
            "–ü—Ä–∏—à–ª–∏—Ç–µ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º —Ç–µ–∫—Å—Ç –≤–∞–∫–∞–Ω—Å–∏–∏ –≤ —Å–≤–æ–±–æ–¥–Ω–æ–π —Ñ–æ—Ä–º–µ.\n"
            "–ú–æ–∂–Ω–æ –≤–∫–ª—é—á–∏—Ç—å –ª—é–±—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é: –ø–æ–∑–∏—Ü–∏—é, –∫–æ–º–ø–∞–Ω–∏—é, –ª–æ–∫–∞—Ü–∏—é, –∑–∞—Ä–ø–ª–∞—Ç—É, —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è, —É—Å–ª–æ–≤–∏—è, –∫–æ–Ω—Ç–∞–∫—Ç.\n"
            "–ï—Å–ª–∏ –µ—Å—Ç—å —Å—Å—ã–ª–∫–∞ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é ‚Äî –≤—Å—Ç–∞–≤—å—Ç–µ –µ—ë –ø—Ä—è–º–æ –≤ —Ç–µ–∫—Å—Ç.",
            parse_mode=ParseMode.HTML
        )

    async def cmd_post_ad(self, message: Message, state: FSMContext):
        """Start advertisement posting process."""
        await state.set_state(AdStates.waiting_for_title)
        await message.answer(
            "üì£ **–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∫–ª–∞–º–Ω–æ–≥–æ –ø–æ—Å—Ç–∞**\n\n"
            "–ó–∞–ø–æ–ª–Ω–∏–º –¥–∞–Ω–Ω—ã–µ –ø–æ —à–∞–≥–∞–º.\n\n"
            "**–®–∞–≥ 1/6:** –í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: *–ö—É—Ä—Å –ø–æ Python —Å–æ —Å–∫–∏–¥–∫–æ–π 30%*",
            parse_mode=ParseMode.HTML
        )

    async def process_freeform_text(self, message: Message, state: FSMContext):
        """Handle incoming free-form vacancy text, normalize via LLM, and show preview."""
        await message.answer("üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ç–µ–∫—Å—Ç –≤–∞–∫–∞–Ω—Å–∏–∏...")
        try:
            normalized = await generate_vacancy_from_freeform(message.text)
            await state.update_data(freeform_post=normalized)
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(text="‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data="confirm_freeform_vacancy"),
                    InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç", callback_data="edit_freeform_vacancy")
                ],
                [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_vacancy")]
            ])
            await message.answer(f"üìã **–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –≤–∞–∫–∞–Ω—Å–∏–∏:**\n\n{normalized}", reply_markup=keyboard, parse_mode=ParseMode.HTML)
            await state.set_state(VacancyStates.confirming_freeform)
        except Exception as e:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {str(e)}")
            await state.clear()

    async def process_ad_title(self, message: Message, state: FSMContext):
        await state.update_data(ad_title=message.text)
        await state.set_state(AdStates.waiting_for_brand)
        await message.answer(
            "**–®–∞–≥ 2/6:** –í–≤–µ–¥–∏—Ç–µ –±—Ä–µ–Ω–¥/–∫–æ–º–ø–∞–Ω–∏—é\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: *EduTech*",
            parse_mode=ParseMode.HTML
        )

    async def process_ad_brand(self, message: Message, state: FSMContext):
        await state.update_data(ad_brand=message.text)
        await state.set_state(AdStates.waiting_for_description)
        await message.answer(
            "**–®–∞–≥ 3/6:** –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ\n"
            "–ö—Ä–∞—Ç–∫–æ –æ –ø—Ä–æ–¥—É–∫—Ç–µ/—É—Å–ª—É–≥–µ",
            parse_mode=ParseMode.HTML
        )

    async def process_ad_description(self, message: Message, state: FSMContext):
        await state.update_data(ad_description=message.text)
        await state.set_state(AdStates.waiting_for_offer)
        await message.answer(
            "**–®–∞–≥ 4/6:** –í–≤–µ–¥–∏—Ç–µ –æ—Ñ—Ñ–µ—Ä/–ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: *–°–∫–∏–¥–∫–∞ 30%, —Ä–∞—Å—Å—Ä–æ—á–∫–∞, —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç*",
            parse_mode=ParseMode.HTML
        )

    async def process_ad_offer(self, message: Message, state: FSMContext):
        await state.update_data(ad_offer=message.text)
        await state.set_state(AdStates.waiting_for_link)
        await message.answer(
            "**–®–∞–≥ 5/6:** –í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É (–µ—Å–ª–∏ –µ—Å—Ç—å)\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: *https://example.com*",
            parse_mode=ParseMode.HTML
        )

    async def process_ad_link(self, message: Message, state: FSMContext):
        await state.update_data(ad_link=message.text)
        await state.set_state(AdStates.waiting_for_contact)
        await message.answer(
            "**–®–∞–≥ 6/6:** –í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: *@manager* –∏–ª–∏ *sales@example.com*",
            parse_mode=ParseMode.HTML
        )

    async def process_ad_contact(self, message: Message, state: FSMContext):
        await state.update_data(ad_contact=message.text)
        data = await state.get_data()
        preview = (
            "üì£ **–†–µ–∫–ª–∞–º–Ω—ã–π –ø–æ—Å—Ç**\n\n"
            f"üîñ **–ó–∞–≥–æ–ª–æ–≤–æ–∫:** {data.get('ad_title','')}\n"
            f"üè∑Ô∏è **–ë—Ä–µ–Ω–¥:** {data.get('ad_brand','')}\n"
            f"üìù **–û–ø–∏—Å–∞–Ω–∏–µ:** {data.get('ad_description','')}\n"
            f"üéÅ **–û—Ñ—Ñ–µ—Ä:** {data.get('ad_offer','')}\n"
            f"üîó **–°—Å—ã–ª–∫–∞:** {data.get('ad_link','‚Äî')}\n"
            f"üìû **–ö–æ–Ω—Ç–∞–∫—Ç:** {data.get('ad_contact','')}\n"
        )
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data="confirm_ad"),
                InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="edit_ad")
            ],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_vacancy")]
        ])
        await message.answer(preview, reply_markup=keyboard, parse_mode=ParseMode.HTML)
        await state.set_state(AdStates.confirming_ad)

    async def confirm_freeform_vacancy(self, callback: CallbackQuery, state: FSMContext):
        """Publish normalized free-form vacancy."""
        data = await state.get_data()
        post = data.get("freeform_post")
        if not post:
            await callback.message.edit_text("‚ùå –ù–µ—Ç –≥–æ—Ç–æ–≤–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏.")
            await state.clear()
            return
        try:
            # Optional AI polish based on config
            final_text = post
            if getattr(config, 'AI_POLISH_ENABLE_VACANCY', True):
                try:
                    final_text = await self.generator.polish_vacancy_text(post)
                except Exception:
                    final_text = post
            ok = await self.publisher.publish_vacancy(final_text)
            if ok:
                await callback.message.edit_text("‚úÖ –í–∞–∫–∞–Ω—Å–∏—è –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞!")
            else:
                await callback.message.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é.")
        except Exception as e:
            await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {str(e)}")
        await state.clear()

    async def edit_freeform_vacancy(self, callback: CallbackQuery, state: FSMContext):
        """Return to free-form input for editing."""
        await callback.message.edit_text(
            "‚úèÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∑–∞–Ω–æ–≤–æ —Ç–µ–∫—Å—Ç –≤–∞–∫–∞–Ω—Å–∏–∏ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.\n\n"
            "–ï—Å–ª–∏ –µ—Å—Ç—å —Å—Å—ã–ª–∫–∞ ‚Äî –≤—Å—Ç–∞–≤—å—Ç–µ –µ—ë –≤ —Ç–µ–∫—Å—Ç.",
            parse_mode=ParseMode.HTML
        )
        await state.set_state(VacancyStates.waiting_for_freeform)

    async def confirm_ad(self, callback: CallbackQuery, state: FSMContext):
        data = await state.get_data()
        try:
            # Generate ad post with optional AI polish from config
            use_ai = getattr(config, 'AI_POLISH_ENABLE_AD', True)
            post = await self.generator.generate_ad_post(data, use_ai_polish=use_ai)
            ok = await self.publisher.publish_vacancy(post)
            if ok:
                await callback.message.edit_text("‚úÖ –†–µ–∫–ª–∞–º–Ω—ã–π –ø–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω!")
            else:
                await callback.message.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ—Å—Ç.")
        except Exception as e:
            await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {str(e)}")
        await state.clear()

    async def edit_ad(self, callback: CallbackQuery, state: FSMContext):
        await callback.message.edit_text(
            "‚úèÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∑–∞–Ω–æ–≤–æ –¥–∞–Ω–Ω—ã–µ ‚Äî –Ω–∞—á–Ω—ë–º —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞.",
            parse_mode=ParseMode.HTML
        )
        await state.set_state(AdStates.waiting_for_title)

    async def process_position(self, message: Message, state: FSMContext):
        await state.update_data(position=message.text)
        await state.set_state(VacancyStates.waiting_for_company)
        await message.answer(
            "**–®–∞–≥ 2/9:** –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: *TechCorp Beijing*",
            parse_mode=ParseMode.HTML
        )

    async def process_company(self, message: Message, state: FSMContext):
        await state.update_data(company=message.text)
        await state.set_state(VacancyStates.waiting_for_location)
        await message.answer(
            "**–®–∞–≥ 3/9:** –í–≤–µ–¥–∏—Ç–µ –ª–æ–∫–∞—Ü–∏—é\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: *–®–∞–Ω—Ö–∞–π, –ü—É–¥—É–Ω* –∏–ª–∏ *–ü–µ–∫–∏–Ω (—É–¥–∞–ª–µ–Ω–Ω–æ)*",
            parse_mode=ParseMode.HTML
        )

    async def process_location(self, message: Message, state: FSMContext):
        await state.update_data(location=message.text)
        await state.set_state(VacancyStates.waiting_for_salary)
        await message.answer(
            "**–®–∞–≥ 4/9:** –í–≤–µ–¥–∏—Ç–µ –∑–∞—Ä–ø–ª–∞—Ç—É\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: *25,000-35,000 RMB* –∏–ª–∏ *–û–±—Å—É–∂–¥–∞–µ—Ç—Å—è*",
            parse_mode=ParseMode.HTML
        )

    async def process_salary(self, message: Message, state: FSMContext):
        await state.update_data(salary=message.text)
        await state.set_state(VacancyStates.waiting_for_experience)
        await message.answer(
            "**–®–∞–≥ 5/9:** –í–≤–µ–¥–∏—Ç–µ —Ç—Ä–µ–±—É–µ–º—ã–π –æ–ø—ã—Ç\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: *3+ –≥–æ–¥–∞* –∏–ª–∏ *Middle/Senior*",
            parse_mode=ParseMode.HTML
        )

    async def process_experience(self, message: Message, state: FSMContext):
        await state.update_data(experience=message.text)
        await state.set_state(VacancyStates.waiting_for_description)
        await message.answer(
            "**–®–∞–≥ 6/9:** –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏\n"
            "–û–ø–∏—à–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ –∏ –ø—Ä–æ–µ–∫—Ç",
            parse_mode=ParseMode.HTML
        )

    async def process_description(self, message: Message, state: FSMContext):
        await state.update_data(description=message.text)
        await state.set_state(VacancyStates.waiting_for_requirements)
        await message.answer(
            "**–®–∞–≥ 7/9:** –í–≤–µ–¥–∏—Ç–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: *Python, Django, PostgreSQL, –æ–ø—ã—Ç —Å –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–∞–º–∏*",
            parse_mode=ParseMode.HTML
        )

    async def process_requirements(self, message: Message, state: FSMContext):
        await state.update_data(requirements=message.text)
        await state.set_state(VacancyStates.waiting_for_benefits)
        await message.answer(
            "**–®–∞–≥ 8/9:** –í–≤–µ–¥–∏—Ç–µ —É—Å–ª–æ–≤–∏—è –∏ –±–µ–Ω–µ—Ñ–∏—Ç—ã\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: *–†–µ–ª–æ–∫–∞—Ü–∏—è, –º–µ–¥—Å—Ç—Ä–∞—Ö–æ–≤–∫–∞, –æ–±—É—á–µ–Ω–∏–µ –∫–∏—Ç–∞–π—Å–∫–æ–º—É*",
            parse_mode=ParseMode.HTML
        )

    async def process_benefits(self, message: Message, state: FSMContext):
        await state.update_data(benefits=message.text)
        await state.set_state(VacancyStates.waiting_for_contact)
        await message.answer(
            "**–®–∞–≥ 9/9:** –í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: *@hr_username* –∏–ª–∏ *hr@company.com*",
            parse_mode=ParseMode.HTML
        )

    async def process_contact(self, message: Message, state: FSMContext):
        await state.update_data(contact=message.text)
        
        # Show preview and ask for AI polishing
        data = await state.get_data()
        
        preview = f"""üìã **–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –≤–∞–∫–∞–Ω—Å–∏–∏:**

üéØ **–ü–æ–∑–∏—Ü–∏—è:** {data['position']}
üè¢ **–ö–æ–º–ø–∞–Ω–∏—è:** {data['company']}
üìç **–õ–æ–∫–∞—Ü–∏—è:** {data['location']}
üí∞ **–ó–∞—Ä–ø–ª–∞—Ç–∞:** {data['salary']}
‚≠ê **–û–ø—ã—Ç:** {data['experience']}

üìù **–û–ø–∏—Å–∞–Ω–∏–µ:** {data['description']}
‚úÖ **–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:** {data['requirements']}
üéÅ **–£—Å–ª–æ–≤–∏—è:** {data['benefits']}
üìû **–ö–æ–Ω—Ç–∞–∫—Ç:** {data['contact']}"""
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="ü§ñ –£–ª—É—á—à–∏—Ç—å —Å AI", callback_data="polish_yes"),
                InlineKeyboardButton(text="üìù –û—Å—Ç–∞–≤–∏—Ç—å –∫–∞–∫ –µ—Å—Ç—å", callback_data="polish_no")
            ],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_vacancy")]
        ])
        
        await message.answer(preview, reply_markup=keyboard, parse_mode=ParseMode.HTML)
        await state.set_state(VacancyStates.confirming_vacancy)

    async def handle_polish_choice(self, callback: CallbackQuery, state: FSMContext):
        use_ai = callback.data == "polish_yes"
        data = await state.get_data()
        
        await callback.message.edit_text("üîÑ –ì–µ–Ω–µ—Ä–∏—Ä—É—é —Ñ–∏–Ω–∞–ª—å–Ω—É—é –≤–µ—Ä—Å–∏—é –≤–∞–∫–∞–Ω—Å–∏–∏...")
        
        try:
            # Generate final vacancy post
            vacancy_post = await self.generator.generate_vacancy_post(data, use_ai_polish=use_ai)
            
            # Show final version with confirmation
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(text="‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data="confirm_vacancy"),
                    InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="edit_vacancy")
                ],
                [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_vacancy")]
            ])
            
            await callback.message.edit_text(
                f"üìã **–§–∏–Ω–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è –≤–∞–∫–∞–Ω—Å–∏–∏:**\n\n{vacancy_post}",
                reply_markup=keyboard,
                parse_mode=ParseMode.HTML
            )
            
            # Store final post in state
            await state.update_data(final_post=vacancy_post)
            
        except Exception as e:
            await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {str(e)}")
            await state.clear()

    async def confirm_vacancy(self, callback: CallbackQuery, state: FSMContext):
        """Confirm and publish vacancy."""
        data = await state.get_data()
        final_post = data.get('final_post')
        
        if not final_post:
            await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞: —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –ø–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            await state.clear()
            return
        
        await callback.message.edit_text("üîÑ –ü—É–±–ª–∏–∫—É—é –≤–∞–∫–∞–Ω—Å–∏—é...")
        
        try:
            success = await self.publisher.publish_vacancy(final_post)
            
            if success:
                await callback.message.edit_text("‚úÖ –í–∞–∫–∞–Ω—Å–∏—è —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ –≤ –∫–∞–Ω–∞–ª–µ!")
            else:
                await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–Ω–∞–ª–∞.")
                
        except Exception as e:
            await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        
        await state.clear()

    async def edit_vacancy(self, callback: CallbackQuery, state: FSMContext):
        """Allow editing vacancy (restart process)."""
        await callback.message.edit_text(
            "‚úèÔ∏è –î–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /post_vacancy –∑–∞–Ω–æ–≤–æ.\n\n"
            "–í–∞–∫–∞–Ω—Å–∏—è –Ω–µ –±—ã–ª–∞ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞."
        )
        await state.clear()

    async def cancel_vacancy(self, callback: CallbackQuery, state: FSMContext):
        """Cancel vacancy posting."""
        await callback.message.edit_text("‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        await state.clear()

    async def start_bot(self):
        """Start the bot."""
        try:
            # Validate configuration
            config.validate_config()
            
            # Test connections
            logger.info("üîç Testing connections...")
            publisher_ok = await self.publisher.test_connection()
            
            if not publisher_ok:
                logger.error("‚ùå Publisher connection failed. Check BOT_TOKEN and CHANNEL_ID.")
                return
            
            # Start scheduler
            self.scheduler.start()
            logger.info("‚è∞ Scheduler started")
            
            # Set bot command list for Telegram menu
            await self.bot.set_my_commands([
                BotCommand(command="start", description="–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
                BotCommand(command="help", description="–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É"),
                BotCommand(command="post_vacancy", description="–î–æ–±–∞–≤–∏—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é –ø–æ —à–∞–≥–∞–º"),
                BotCommand(command="post_vacancy_free", description="–í–∞–∫–∞–Ω—Å–∏—è –≤ —Å–≤–æ–±–æ–¥–Ω–æ–π —Ñ–æ—Ä–º–µ"),
                BotCommand(command="post_ad", description="–î–æ–±–∞–≤–∏—Ç—å —Ä–µ–∫–ª–∞–º–Ω—ã–π –ø–æ—Å—Ç"),
                BotCommand(command="post_now", description="–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ —Å–µ–π—á–∞—Å"),
                BotCommand(command="status", description="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞"),
            ])
            
            # Start polling
            logger.info("üöÄ Starting bot...")
            await self.dp.start_polling(self.bot)
            
        except Exception as e:
            logger.error(f"‚ùå Failed to start bot: {e}")
        finally:
            await self.cleanup()

    async def cleanup(self):
        """Cleanup resources."""
        logger.info("üßπ Cleaning up...")
        
        if self.scheduler.running:
            self.scheduler.shutdown()
        
        await self.bot.session.close()
        await self.publisher.close()

async def main():
    """Main function."""
    bot = ChinaITBot()
    await bot.start_bot()

if __name__ == "__main__":
    asyncio.run(main())